#!/usr/bin/env node

var BatchJob=require(__dirname+'/../src/mlscore/batchjob.js').BatchJob;
var DocStorClient=require(__dirname+'/../src/mlscore/docstorclient.js').DocStorClient;
var LariClient=require(__dirname+'/../src/mlscore/lariclient.js').LariClient;
var JSQ=require(__dirname+'/../src/mlscore/jsqcore/jsq.js').JSQ;
var jsutils=require(__dirname+'/../src/mlscore/jsutils/jsutils.js');
var copyFileSync=require(__dirname+'/../src/mlscore/jsutils/3rdparty/fs-copy-file-sync.js');
var mlplog=require(__dirname+'/../src/mlscore/mlplog.js');

var fs=require('fs');
var child_process=require('child_process');
var os=require('os');
var pathmodule=require('path');

function print_usage() {
	console.log ('Usage:');
	console.log ('    mls-run [script.ml] --inputs [key]:[value] ... --outputs [key]:[value] ... --parameters [key]:[value] ...');
	console.log ('Additional options:');
	console.log ('    --results=[/path/to/output]');
	console.log ('    --server=[url of lari server, empty for local, * for default remote]');
	console.log ('    --container=[container id for processing server]');
	console.log ('    --auto_download');
}

var CLP=new CLParamsWithIOP(process.argv);
var arg1=CLP.unnamedParameters[0]||'';
if (!arg1) {
	print_usage();
	process.exit(-1);
}

var results_path=CLP.namedParameters.results||'';
var lari_server_url=CLP.namedParameters.server||'';
if (lari_server_url=='*') lari_server_url='https://lari1.herokuapp.com';
var container_id=CLP.namedParameters.container||'';
if ((!lari_server_url)&&(!container_id)) {
	container_id=os.hostname(); //this is the default container id for local server
}
var using_local_lari_server=false;
if (!lari_server_url) {
	using_local_lari_server=true;
	lari_server_url='http://localhost:6057'
}

if ((lari_server_url)&&(!container_id)) {
	console.log ('Missing required parameter when connecting to remote server: --container');
	process.exit(-1);
}

if (results_path) {
	if (fs.existsSync(results_path)) {
		// Note: this is not as risky as it seems ... see ML_ALLOW_RM below
		remove_directory(results_path);
	}
	if (fs.existsSync(results_path)) {
		console.warn('Unable to remove directory: '+results_path);
		process.exit(-1);
	}
	fs.mkdirSync(results_path);
	write_text_file(results_path+'/ML_ALLOW_RM','The presence of this file allows the complete removal of this directory by ml-run.');
}

var script_fname=arg1;
var script=read_text_file(script_fname);
if (!script) {
	console.error('Unable to read script file: '+script_fname);
	process.exit(-1);
}
var all_scripts={};
var study={scripts:{},datasets:{}};
var DSC=new DocStorClient(); //todo
DSC.setDocStorUrl('https://docstor1.herokuapp.com');
DSC.login({},function() {});
var lari_client=new LariClient();

lari_client.setLariServerUrl(lari_server_url);
lari_client.setContainerId(container_id);

if ('datasets' in CLP.namedParameters) {
	study.datasets=load_study_datasets(CLP.namedParameters['datasets']);
}

var BJ=new BatchJob(null,lari_client);
BJ.setBatchScript(script);
BJ.setAllScripts(all_scripts);
BJ.setStudyObject(study);
BJ.setDocStorClient(DSC);
BJ.setKBucketUrl('https://kbucket.flatironinstitute.org'); //todo
BJ.setAutoDownload(false);
if ('auto_download' in CLP.namedParameters) {
	BJ.setAutoDownload(true);
}
BJ.getSpec(function(err,spec) {
	if (err) {
		console.error(err);
		process.exit(-1);
	}
	if ('spec' in CLP.namedParameters) {
		spec.name=spec.name||script_fname;
		if ('p' in CLP.namedParameters) {
			print_human_readable_spec(spec);
			return;
		}
		console.log (JSON.stringify(spec,null,4));
		return;
	}

	mlplog.onMessage(function(msg) {
		show_log_message(msg);
	});

	if (!check_iop_against_spec_and_set_default_params(spec,CLP.namedParameters.inputs,CLP.namedParameters.outputs,CLP.namedParameters.parameters)) {
		process.exit(-1);
	}

	var inputs=CLP.namedParameters['inputs'];
	var inputs2={};
	for (var iname in inputs) {
		var prv0=create_prv_object_for_input_file(inputs[iname]);
		if (!prv0) {
			console.error(`Error in input ${iname}`);
			process.exit(-1);
		}
		inputs2[iname]={prv:prv0};
	}

	BJ.setInputs(inputs2);
	var outputs=CLP.namedParameters['outputs'];
	var outputs2={};
	for (var oname in outputs) {
		outputs2[oname]='_mls_output_'+oname;
	}
	BJ.setOutputs(outputs2);
	BJ.setParameters(CLP.namedParameters['parameters']);

	JSQ.connect(BJ,'results_changed',null,function() {
		if (results_path) {
			var results=BJ.results();
			for (var fname in results) {
				var X=results[fname];
				if (is_safe_result_name(fname)) {
					make_dirs_for_file_if_needed(results_path,fname);
					var path=results_path+'/'+fname;
					remove_file_if_exists(path+'.pending.json');
					remove_file_if_exists(path+'.running.json');
					remove_file_if_exists(path+'.error.json');
					if (X.status=='finished') {
						var val=X.value||{};
						if (val.prv) {
							write_text_file(path+'.prv',JSON.stringify(val.prv,null,4));
						}
						else {
							write_text_file(path,JSON.stringify(val,null,4));	
						}
					}
					else {
						write_text_file(path+'.'+X.status+'.json',JSON.stringify(X,null,4));
					}
				}
				else {
					console.warn('Not writing unsafe result name: '+fname);
				}
			}
		}
	});

	JSQ.connect(BJ,'completed',null,function() {
		if (BJ.error()) {
			console.error('Error running script: '+BJ.error());
			process.exit(-1);
			return;
		}
		
		var results=BJ.results();
		for (var oname in outputs) {
			if ((!outputs2[oname] in results)||(!results[outputs2[oname]])) {
				console.error('Output not assigned in script: '+oname);
				process.exit(-1);
			}
			var X=results[outputs2[oname]];
			if (X.status!='finished') {
				console.error('Unexpected, status not finished for output: '+oname);
				process.exit(-1);
			}
			var val=X.value||{};
			if (val.prv) {
				var out_fname=outputs[oname];
				if (jsutils.ends_with(out_fname,'.prv')) {
					console.log ('Writing output -> '+out_fname);
					write_text_file(out_fname,JSON.stringify(val.prv,null,4));		
				}
				else {
					console.log ('Copying output -> '+out_fname);
					copyFileSync(val.prv.original_path,out_fname);
				}
			}
			else {
				write_text_file(outputs[oname],JSON.stringify(val,null,4));
			}
			outputs2[oname]='_mls_output_'+oname;
		}
		return;
	});


	lari_client.getStats({},function(err0,stats0) {
		if (err0) {
			console.error(err0);
			if (using_local_lari_server) {
				console.log ('Unable to connect to local lari server.');
				console.log ('');
				console.log (`To run a server locally, open a separate terminal and run "ml-lari-start".`);
				console.log (`Note: if you are in a python virtualenv, you will probably want to use the same virtualenv when running the local server.`);
				console.log ('');
				console.error(`Error connecting to local lari server (${lari_server_url}). See instructions above.`);
			}
			else
				console.error(`Error connecting to lari server at ${lari_server_url}. Container=${container_id}`);
			process.exit(-1);
		}
		BJ.start();
	});
});

function is_safe_result_name(fname) {
	var list=fname.split('/');
	for (var i in list) {
		if (!is_safe_alphanumeric(list[i]))
			return false;
	}
	return true;

	function is_safe_alphanumeric(str) {
		return str.match(/^[0-9a-zA-Z-_.]+$/);
	}
}

function check_iop_against_spec_and_set_default_params(spec,inputs,outputs,parameters) {
	var spec_inputs=spec.inputs||[];
	var spec_inputs_by_name={};
	for (var ii in spec_inputs) {
		spec_inputs_by_name[spec_inputs[ii].name]=spec_inputs[ii];
	}
	var spec_outputs=spec.outputs||[];
	var spec_outputs_by_name={};
	for (var ii in spec_outputs) {
		spec_outputs_by_name[spec_outputs[ii].name]=spec_outputs[ii];
	}
	var spec_parameters=spec.parameters||[];
	var spec_parameters_by_name={};
	for (var ii in spec_parameters) {
		spec_parameters_by_name[spec_parameters[ii].name]=spec_parameters[ii];
	}
	for (var iname in inputs) {
		if (!(iname in spec_inputs_by_name)) {
			console.error('Unexpected input: '+iname);
			return false;
		}
	}
	for (var iname in spec_inputs_by_name) {
		if (!(iname in inputs)) {
			if (!spec_inputs_by_name[iname].optional) {
				console.error('Missing required input: '+iname);
				return false;
			}
		}
	}
	for (var oname in outputs) {
		if (!(oname in spec_outputs_by_name)) {
			console.error('Unexpected output: '+oname);
			return false;
		}
	}
	for (var oname in spec_outputs_by_name) {
		if (!(oname in outputs)) {
			if (!spec_outputs_by_name[oname].optional) {
				console.error('Missing required output: '+oname);
				return false;
			}
		}
	}
	for (var pname in parameters) {
		if (!(pname in spec_parameters_by_name)) {
			console.error('Unexpected parameter: '+pname);
			return false;
		}
	}
	for (var pname in spec_parameters_by_name) {
		if (!(pname in parameters)) {
			if (!spec_parameters_by_name[pname].optional) {
				console.error('Missing required parameter: '+pname);
				return false;
			}
		}
		if ((!parameters[pname])&&(spec_parameters_by_name[pname].optional)) {
			parameters[pname]=spec_parameters_by_name[pname].default_value||'';
		}
	}
	return true;
}

function create_prv_object_for_input_file(fname) {
	if (jsutils.ends_with(fname,'.prv')) {
		var txt=read_text_file(fname);
		if (!txt) {
			console.error('Error reading file, or file is empty: '+fname);
			return null;
		}
		try {
			return JSON.parse(txt);
		}
		catch(err) {
			console.error('Error parsing json in file: '+fname);
			return null;
		}
	}
	else {
		try {
			var prv0=prv_stat_sync(fname);
			return prv0;
		}
		catch(err) {
			console.error(err);
			return null;
		}
	}
}

function prv_stat_sync(fname) {
	console.log ('Computing SHA-1 for file: '+fname+'...');
	var r = child_process.execSync('ml-prv-stat '+fname);
	var str=r.toString();
	var obj=try_parse_json(str.trim());
	if (!obj) {
		console.error('Error parsing json in output of ml-prv-stat');
		return null;
	}
	return obj;
}

var original_console_log=console.log;
function show_log_message(msg) {
	var col_code='';
	if (msg.side=='server') {
		col_code="\x1b[35m" //magenta
	}
	else if ((msg.labels)&&(msg.labels.script)) {
		col_code="\x1b[32m" //green
	}
	if (col_code)
		original_console_log(col_code+'%s\x1b[0m',msg.text);
	else
		original_console_log(msg.text);
}
  
function read_text_file(fname) {
	try {
		return fs.readFileSync(fname,'utf8');
	}
	catch(err) {
		return '';
	}
}

function remove_directory(path) {
	//to be safe
	if (!path) return;
	if (path=='/') return;
	var ml_allow_rm_path=pathmodule.join(path,'ML_ALLOW_RM');
	if (!fs.existsSync(ml_allow_rm_path)) {
		console.warn('To be safe we cannot remove a directory that does not contain a ML_ALLOW_RM file');
		return;
	}

	delete_folder_recursive(path);

	function delete_folder_recursive(path) {
		if (fs.existsSync(path)) {
			fs.readdirSync(path).forEach(function(file,index) {
				var curpath=pathmodule.join(path,file);
				if (fs.lstatSync(curpath).isDirectory()) { //recurse
					delete_folder_recursive(curpath);
				}
				else {
					fs.unlinkSync(curpath);
				}
			});
		}
		fs.rmdirSync(path);
	}
}

function load_study_datasets(datasets_path) {
	var ret={};
	var files=read_dir_safe(datasets_path);
	if (!files) {
		console.error('Error reading datasets directory: '+datasets_path);
		process.exit(-1);
	}
	var dirs=[];
	for (var i in files) {
		var fname=datasets_path+'/'+files[i];
		var stat0=stat_file(fname);
		if (stat0) {
			if (stat0.isDirectory()) {
				if (!jsutils.starts_with(files[i],'.')) { //don't follow hidden directories
					dirs.push(files[i]);
				}
			}
		}
	}
	for (var i in dirs) {
		var ds=load_dataset_from_directory(datasets_path+'/'+dirs[i]);
		if (ds) {
			ret[dirs[i]]=ds;
		}
	}
	return ret;
}

function load_dataset_from_directory(path) {
	var ret={files:{},parameters:{}};
	var files=read_dir_safe(path);
	if (!files) {
		console.error('Error reading dataset directory: '+path);
		process.exit(-1);
	}
	var dsfiles=[];
	for (var i in files) {
		var fname=path+'/'+files[i];
		var stat0=stat_file(fname);
		if (stat0) {
			if (stat0.isFile()) {
				if (files[i]=='params.json') {
					var txt=read_text_file(fname);
					var obj=try_parse_json(txt)
					if (!obj) {
						console.error('Error parsing parameter file: '+fname);
						process.exit(-1);
					}
					for (var key in obj) {
						ret.parameters[key]=obj[key];
					}
				}
				else if (files[i]=='ML_ALLOW_RM') {
					//ignore
				}
				else if (jsutils.starts_with(files[i],'.')) {
					//ignore
				}
				else {
					dsfiles.push(files[i]);
				}
			}
		}
	}
	for (var i in dsfiles) {
		var fname=path+'/'+dsfiles[i];
		var prv0=create_prv_object_for_input_file(fname);
		if (!prv0) {
			console.error('Unable to get prv object for file: '+fname);
			process.exit(-1);
		}
		var name=dsfiles[i];
		if (jsutils.ends_with(name,'.prv'))
			name=name.slice(0,name.length-4);
		ret.files[name]={prv:prv0};
	}
	return ret;
}




function mkdir_if_needed(path) {
  try {
    fs.mkdirSync(path);
  }
  catch(err) {
  }
}

function read_dir_safe(path) {
	try {
		return fs.readdirSync(path);
	}
	catch(err) {
		return [];
	}
}

function stat_file(fname) {
	try {
		return fs.statSync(fname);
	}
	catch(err) {
		return null;
	}
}

function remove_file_if_exists(path) {
	if (fs.existsSync(path)) {
		fs.unlinkSync(path);
	}
}

function write_text_file(fname,txt) {
	try {
		fs.writeFileSync(fname,txt);
		return true;
	}
	catch(err) {
		return false;
	}
}

function print_human_readable_spec(spec0) {
	if (spec0.name) {
		console.log (spec0.name||'');
		console.log ('');
	}
	if (spec0.description) {
		console.log (spec0.description||'');
		console.log ('');
	}
	console.log ('INPUTS');
	var inputs=spec0.inputs||[];
	for (var i in inputs) {
		var X=inputs[i];
		var opt='';
		if (X.optional) opt='(optional) ';
		console.log (`  ${X.name||''} -- ${opt}${X.description||''}`)
	}
	console.log ('');
	console.log ('OUTPUTS');
	var outputs=spec0.outputs||[];
	for (var i in outputs) {
		var X=outputs[i];
		var opt='';
		if (X.optional) opt='(optional) ';
		console.log (`  ${X.name||''} -- ${opt}${X.description||''}`)
	}
	console.log ('');
	console.log ('PARAMETERS');
	var parameters=spec0.parameters||[];
	for (var i in parameters) {
		var X=parameters[i];
		var opt='';
		if (X.optional) opt='(optional) ';
		console.log (`  ${X.name||''} -- ${opt}${X.description||''}`)
	}
}

function make_dirs_for_file_if_needed(base_directory,fname) {
	var list=fname.split('/');
	if (list.length<=1) return;
	for (var j=0; j<list.length-1; j++) {
		mkdir_if_needed(base_directory+'/'+list.slice(0,j+1).join('/'));
	}
}

function try_parse_json(str) {
	try {
		return JSON.parse(str);
	}
	catch(err) {
		return null;
	}
}

function CLParamsWithIOP(argv) {
	this.unnamedParameters=[];
	this.namedParameters={};

	var inputs={};
	var outputs={};
	var parameters={};
	this.namedParameters['inputs']=inputs;
	this.namedParameters['outputs']=outputs;
	this.namedParameters['parameters']=parameters;

	var args=argv.slice(2);
	for (var i=0; i<args.length; i++) {
		var arg0=args[i];
		if ((arg0.indexOf('-')==0)&&(arg0.indexOf('-')!=0)) {
			arg0='-'+arg0; // a hack
		}
		if (arg0.indexOf('--')===0) {
			arg0=arg0.slice(2);
			var ind=arg0.indexOf('=');
			if (ind>=0) {
				this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
			}
			else {
				if ((arg0=='inputs')||(arg0=='i')) {
					while ((i+1<args.length)&&(args[i+1][0]!='-')) {
						i++;
						var list0=args[i].split(':');
						inputs[list0[0]]=list0[1];
					}
				}
				else if ((arg0=='outputs')||(arg0=='o')) {
					while ((i+1<args.length)&&(args[i+1][0]!='-')) {
						i++;
						var list0=args[i].split(':');
						outputs[list0[0]]=list0[1];
					}
				}
				else if ((arg0=='parameters')||(arg0=='p')) {
					while ((i+1<args.length)&&(args[i+1][0]!='-')) {
						i++;
						var list0=args[i].split(':');
						parameters[list0[0]]=list0[1];
					}
				}
				else {
					//this.namedParameters[arg0]=args[i+1]||'';
					//i++;
					this.namedParameters[arg0]='';
				}
			}
		}
		else if (arg0.indexOf('-')===0) {
			arg0=arg0.slice(1);
			this.namedParameters[arg0]='';
		}
		else {
			this.unnamedParameters.push(arg0);
		}
	}
}