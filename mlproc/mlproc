#!/usr/bin/env node

const sha1 = require('node-sha1');

var common=require(__dirname+'/common.js');

// Set environment variables from mountainlab.env
// Note: existing environment variables will NOT be overriden

var ml_config_file=common.config_file_path();
require('dotenv').config({path:ml_config_file});

var program = require('commander');

var db_utils=require(__dirname+'/db_utils.js');

process.env.KBUCKET_URL=process.env.KBUCKET_URL||'https://kbucket.flatironinstitute.org';

// When SIGINT or SIGTERM is received, we cleanup by stopping the running process and removing the temporary directory, prior to truly exiting with error code -1
process.on('SIGTERM', cleanup_and_exit);
process.on('SIGINT', cleanup_and_exit);
function cleanup_and_exit() {
  require(__dirname+'/systemprocess.js').stop_all(function() {
    require(__dirname+'/run_process.js').cleanup(function() {
      process.exit("-1");
    });
  });
}

program
  .command('list-processors [pattern]')
  .description('List MountainLab processors installed on this machine. Optionally specify a wildcard pattern for filtering the results.')
  .option('--mp_file [file.mp]', 'Specify explicitly a .mp file containing processors')
  .option('--mp_file_args [arguments]', 'Pass additional arguments to the mp files')
  .option('--container [path_or_url]', 'Use processors in a container')
  .action(function (pattern, cmd) {
    handle_container(cmd);
    cmd.pattern=pattern;
    require(__dirname+'/list_processors.js').cmd_list_processors(cmd,function(err) {
      if (err) {
        process.exit(-1);
        return; 
      }
      process.exit(0);
    });
  });

program
  .command('spec [processor-name]')
  .description('Show the spec for a specific processor, or all processors.')
  .option('-p, --print', 'Format output in human-readable syntax')
  .option('--mp_file [file.mp]', 'Specify explicitly an .mp file containing processors')
  .option('--mp_file_args [arguments]', 'Pass additional arguments to the mp files')
  .option('--container [path_or_url]', 'Use processors in a container')
  .option('--lock','Lock the spec for rapid future lookup. But changes in processor packages will not take effect.')
  .option('--unlock','Unlock the spec after it has been locked')
  .action(function (processor_name, cmd) {
    handle_container(cmd);
    require(__dirname+'/spec.js').cmd_spec(processor_name,cmd,function(err) {
      if (err) {
        process.exit(-1);
        return; 
      }
      process.exit(0);
    });
  });

program
  .command('run-process <processor-name>')
  .description('Run a processor job.')
  .option('-i, --inputs [inputs...]', 'List of named input files in key:value format.')
  .option('-o, --outputs [outputs...]', 'List of named output files in key:value format.')
  .option('-p, --parameters [parameters...]', 'List of named parameters in key:value format.')
  .option('--iops [iops...]', 'List of inputs, outputs, or parameters in key:value format. It is preferred to instead use --inputs, --outputs, or --parameters.')
  .option('-m, --mode [mode]', 'Either run (default), exec, or queue.')
  .option('--keep_tempdir','Do not remove the temporary directory for this process.')
  .option('--force_run','Force processor to run even if job was found in cache.')
  .option('--lari_id [lari_id]','Run the processing on a remote (lari) server. Alternatively, use environment variable LARI_ID.')
  .option('--lari_passcode [lari_passcode]','Used with --lari_id. Alternatively, use environment variable LARI_PASSCODE.')
  .option('--lari_out [outfile.json]','Save lari info to output JSON file. In particular, saves the lari_job_id.')
  .option('--processor_command_prefix [prefix]','For example, srun.')
  .option('--mp_file [file.mp]', 'Specify explicitly an .mp file containing processors')
  .option('--mp_file_args [arguments]', 'Pass additional arguments to the mp files')
  .option('--container [path_or_url]', 'Use processors in a container')
  .option('-v, --verbose [level]','Level of verbosity / console output (normal, minimal, none)')
  .action(function (processor_name, cmd) {
    handle_container(cmd);
    require(__dirname+'/run_process.js').cmd_run_process(processor_name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-locate [prv-file-name]')
  .description('Locate a file corresponding to a prv record. Prints file name (or URL) to stdout.')
  .option('--sha1 [sha1]','If prv file is not provided, specify the sha1.')
  .option('--size [size]','If prv file is not provided, specify the size.')
  .option('--fcs [fcs]','If prv file is not provided, specify the fcs.')
  .option('--original_path [original_path]','If prv file is not provided, optionally specify the original path.')
  .option('--download','If found remotely, download to a temporary file.')
  .option('--remote_only','Only look remotely (on kbucket)')
  .option('--verbose [level]','Level of verbosity for debugging')
  .action(function (prv_file_name, cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_locate(prv_file_name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-create <input-file-name> [output-file-name]')
  .description('Create a new prv file corresponding to an input file.')
  .option('--stat', 'Do not write output file. Instead write the prv record to the console.')
  .option('--sha1', 'Do not write output file. Instead write the sha1 hash to the console.')
  .action(function (input_fname, output_prv_fname, cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_create(input_fname,output_prv_fname,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-create-index <input-directory-name> [output-file-name]')
  .description('Create a prv index file with prv objects for all the files in the input directory.')
  .action(function (input_directory_name, output_file_fname, cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_create_index(input_directory_name,output_file_fname,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-download <prv-file-name> [output-file-name]')
  .description('Download a file corresponding to a prv record.')
  .option('--sha1 [sha1]','If prv file is not provided, specify the sha1.')
  .option('--size [size]','If prv file is not provided, specify the size.')
  .option('--fcs [fcs]','If prv file is not provided, specify the fcs.')
  .option('--bytes [range-of-bytes]','Range of bytes to download')
  .option('--verbose [level]','Level of verbosity for debugging')
  .action(function (prv_file_name, output_file_name,cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_download(prv_file_name,output_file_name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('read-dir [directory]')
  .description('Read a directory, which could be a kbucket path, returning a JSON object.')
  .option('--verbose [level]','Level of verbosity for debugging')
  .action(function (directory, cmd) {
    require(__dirname+'/prv_utils.js').cmd_read_dir(directory,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('config [name]')
  .description('Display configuration information. Optionally use name=package_directory to print the main package directory.')
  .option('--format [format]','Options: text (default) or json')
  .action(function (name,cmd) {
    require(__dirname+'/display_config.js').cmd_config(name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

async function main() {
  var argv=await preprocess_argv(process.argv);
  program.parse(argv);
}
main();

async function preprocess_argv(argv) {
  if (argv.indexOf('run-process')>=0) {
    return preprocess_run_process_argv(argv);
  }
  else {
    return argv;
  }
}

function handle_container(opts) {
  if ((opts.container)&&(!opts.lari_id)&&(!process.env.LARI_ID)) {
    let container=opts.container;
    delete opts.container;
    opts.mp_file=__dirname+'/handle_container_spec.js';
    opts.mp_file_args=container;
  }
}

/*
function CLParams(argv) {
  this.unnamedParameters=[];
  this.namedParameters={};

  var args=argv.slice(2);
  for (var i=0; i<args.length; i++) {
    var arg0=args[i];
    if (arg0.indexOf('--')===0) {
      arg0=arg0.slice(2);
      var ind=arg0.indexOf('=');
      if (ind>=0) {
        this.namedParameters[arg0.slice(0,ind)]=arg0.slice(ind+1);
      }
      else {
        this.namedParameters[arg0]=args[i+1]||'';
        i++;
      }
    }
    else if (arg0.indexOf('-')===0) {
      arg0=arg0.slice(1);
      this.namedParameters[arg0]='';
    }
    else {
      this.unnamedParameters.push(arg0);
    }
  }
}
*/

function preprocess_run_process_argv(argv) {
  var ret=[];
  var i=0;
  while (i<argv.length) {
    var arg0=argv[i];
    var do_combine=false;
    if ((arg0=='--inputs')||(arg0=='-i')||(arg0=='--outputs')||(arg0=='-o')||(arg0=='--parameters')||(arg0=='-p')||(arg0=='--iops'))
      do_combine=true;
    i++;
    if (do_combine) {
      var args0=[];
      while ((i<argv.length)&&(argv[i].slice(0,1)!='-')&&(argv[i].indexOf(':')>=0)) {
        args0.push(argv[i]);
        i++;
      }
      if (args0.length>0) {
        ret.push(arg0);
        ret.push(args0.join('[---]'));
      }
    }
    else {
      ret.push(arg0);
    }
  }
  return ret;
}
