#!/usr/bin/env node

var common=require(__dirname+'/common.js');

// Set environment variables from mountainlab.env
// Note: existing environment variables will NOT be overriden
var ml_config_file=common.config_file_path();
require('dotenv').config({path:ml_config_file});

var program = require('commander');

var package_json = require('./package.json');

var program = require('commander');

var db_utils=require(__dirname+'/db_utils.js');

process.on('SIGTERM', cleanup_and_exit);
process.on('SIGINT', cleanup_and_exit);
function cleanup_and_exit() {
  require(__dirname+'/systemprocess.js').stop_all();
  process.exit("-1");
}

program
  .command('list-processors [pattern]')
  .description('List MountainLab processors installed on this machine. Optionally specify a wildcard pattern for filtering the results.')
  //.option('--package [package-name]', 'Specify ML processor package by name')
  //.option('--package_uri [package-uri]', 'Specify ML processor package by URI')
  .action(function (pattern, cmd) {
    cmd.pattern=pattern;
    require(__dirname+'/list_processors.js').cmd_list_processors(cmd,function(err) {
      if (err) {
        process.exit(-1);
        return; 
      }
      process.exit(0);
    });
  });

program
  .command('spec <processor-name>')
  .description('Show the spec for a specific processor.')
  .option('-p, --print', 'Format output in human-readable syntax')
  .option('--package [package-name]', 'Specify ML processor package by name')
  .option('--package_uri [package-uri]', 'Specify ML processor package by URI')
  .action(function (processor_name, cmd) {
    require(__dirname+'/spec.js').cmd_spec(processor_name,cmd,function(err) {
      process.exit(0);
    });
  });

program
  .command('run-process <processor-name>')
  .description('Show the spec for a specific processor.')
  .option('-i, --inputs [inputs...]', 'List of named input files in key:value format.')
  .option('-o, --outputs [outputs...]', 'List of named output files in key:value format.')
  .option('-p, --parameters [parameters...]', 'List of named parameters in key:value format.')
  .option('-m, --mode [mode]', 'Either run (default), exec, or queue.')
  .action(function (processor_name, cmd) {
    require(__dirname+'/run_process.js').cmd_run_process(processor_name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-locate [prv-file-name]')
  .description('Locate a file corresponding to a prv record.')
  .option('--sha1 [sha1]','If prv file is not provided, specify the sha1.')
  .option('--size [size]','If prv file is not provided, specify the size.')
  .option('--fcs [fcs]','If prv file is not provided, specify the fcs.')
  .action(function (prv_file_name, cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_locate(prv_file_name,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('prv-create <input-file-name> [output-file-name]')
  .description('Create a new prv file corresponding to an input file.')
  .option('--stat', 'Do not write output file. Instead write the prv record to the console.')
  .option('--sha1', 'Do not write output file. Instead write the sha1 hash to the console.')
  .action(function (input_fname, output_prv_fname, cmd) {
    require(__dirname+'/prv_utils.js').cmd_prv_create(input_fname,output_prv_fname,cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

program
  .command('config')
  .description('Display configuration information')
  .action(function (cmd) {
    require(__dirname+'/display_config.js').cmd_config(cmd,function(err) {
      if (err) {
        console.error(err);
        process.exit(-1);
      }
      process.exit(0);
    });
  });

var argv=preprocess_argv(process.argv);
program.parse(argv);

function preprocess_argv(argv) {
  if (argv.indexOf('run-process')>=0) {
    return preprocess_run_process_argv(argv);
  }
  else {
    return argv;
  }
}

function preprocess_run_process_argv(argv) {
  var ret=[];
  var i=0;
  while (i<argv.length) {
    var arg0=argv[i];
    var do_combine=false;
    if ((arg0=='--inputs')||(arg0=='-i')||(arg0=='--outputs')||(arg0=='-o')||(arg0=='--parameters')||(arg0=='-p'))
      do_combine=true;
    i++;
    if (do_combine) {
      var args0=[];
      while ((i<argv.length)&&(argv[i].slice(0,1)!='-')&&(argv[i].indexOf(':')>=0)) {
        args0.push(argv[i]);
        i++;
      }
      if (args0.length>0) {
        ret.push(arg0);
        ret.push(args0.join('[---]'));
      }
    }
    else {
      ret.push(arg0);
    }
  }
  return ret;
}
